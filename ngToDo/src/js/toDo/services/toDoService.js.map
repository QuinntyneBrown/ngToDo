{"version":3,"sources":["toDo/services/toDoService.ts"],"names":["app","app.toDo","app.toDo.ToDoService","app.toDo.ToDoService.constructor"],"mappings":";;;;;;AAAA,IAAO,GAAG,CA8BT;AA9BD,WAAO,GAAG;IAACA,IAAAA,IAAIA,CA8BdA;IA9BUA,WAAAA,IAAIA,EAACA,CAACA;QAEbC,YAAYA,CAACA;QAEbA,IAAaA,WAAWA;YAASC,UAApBA,WAAWA,UAA2BA;YAE/CA,SAFSA,WAAWA,CAGTA,KAAsBA,EACtBA,aAAsCA,EACtCA,EAAgBA,EAChBA,WAAsCA;gBANrDC,iBAqBCA;gBAbOA,kBAAMA,KAAKA,EAAEA,aAAaA,EAAEA,EAAEA,EAAEA,WAAWA,CAACA,OAAOA,GAAGA,OAAOA,CAACA,CAACA;gBALxDA,UAAKA,GAALA,KAAKA,CAAiBA;gBACtBA,kBAAaA,GAAbA,aAAaA,CAAyBA;gBACtCA,OAAEA,GAAFA,EAAEA,CAAcA;gBAChBA,gBAAWA,GAAXA,WAAWA,CAA2BA;gBAM1CA,cAASA,GAAGA;oBACfA,IAAIA,QAAQA,GAAGA,KAAIA,CAACA,EAAEA,CAACA,KAAKA,EAAEA,CAACA;oBAC/BA,KAAIA,CAACA,KAAKA,CAACA,EAAEA,MAAMA,EAAEA,KAAKA,EAAEA,GAAGA,EAAEA,KAAIA,CAACA,OAAOA,GAAGA,WAAWA,EAAEA,CAACA,CAACA,IAAIA,CAACA,UAACA,OAAOA;wBACxEA,QAAQA,CAACA,OAAOA,CAACA,OAAOA,CAACA,CAACA;oBAC9BA,CAACA,CAACA,CAACA,KAAKA,CAACA,UAACA,KAAKA;wBACXA,QAAQA,CAACA,MAAMA,CAACA,KAAKA,CAACA,CAACA;oBAC3BA,CAACA,CAACA,CAACA;oBACHA,MAAMA,CAACA,QAAQA,CAACA,OAAOA,CAACA;gBAC5BA,CAACA,CAAAA;YAVDA,CAACA;YAWLD,kBAACA;QAADA,CArBAD,AAqBCC,EArBgCD,UAAMA,CAACA,WAAWA,EAqBlDA;QArBYA,gBAAWA,GAAXA,WAqBZA,CAAAA;QAEDA,OAAOA,CAACA,MAAMA,CAACA,UAAUA,CAACA,CAACA,OAAOA,CAACA,aAAaA,EAAEA,CAACA,OAAOA,EAAEA,eAAeA,EAAEA,IAAIA,EAAEA,aAAaA,EAAEA,WAAWA,CAACA,CAACA,CAACA;IAGpHA,CAACA,EA9BUD,IAAIA,GAAJA,QAAIA,KAAJA,QAAIA,QA8BdA;AAADA,CAACA,EA9BM,GAAG,KAAH,GAAG,QA8BT","file":"toDo/services/toDoService.js","sourceRoot":"C:/Projects/ngToDo/ngToDo/","sourcesContent":["module app.toDo {\r\n\r\n    \"use strict\";\r\n\r\n    export class ToDoService extends common.DataService implements IToDoService\r\n    {\r\n        constructor(\r\n            public $http: ng.IHttpService,\r\n            public $cacheFactory: ng.ICacheFactoryService,\r\n            public $q: ng.IQService,\r\n            public apiEndpoint: common.IApiEndpointConfig) {\r\n\r\n            super($http, $cacheFactory, $q, apiEndpoint.baseUrl + \"todo/\");\r\n\r\n        }\r\n\r\n        public getRecent = () => {\r\n            var deferred = this.$q.defer();\r\n            this.$http({ method: \"GET\", url: this.baseUri + \"getRecent\" }).then((results) => {\r\n                deferred.resolve(results);\r\n            }).catch((error) => {\r\n                deferred.reject(error);\r\n            });\r\n            return deferred.promise;\r\n        }\r\n    }\r\n\r\n    angular.module(\"app.toDo\").service(\"toDoService\", [\"$http\", \"$cacheFactory\", \"$q\", \"apiEndpoint\", ToDoService]);\r\n\r\n\r\n} "]}
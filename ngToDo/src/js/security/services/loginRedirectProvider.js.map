{"version":3,"sources":["security/services/loginRedirectProvider.ts"],"names":["app","app.security","app.security.LoginRedirectProvider","app.security.LoginRedirectProvider.constructor","app.security.config"],"mappings":"AAAA,IAAO,GAAG,CAuDT;AAvDD,WAAO,GAAG;IAACA,IAAAA,QAAQA,CAuDlBA;IAvDUA,WAAAA,QAAQA,EAACA,CAACA;QAEjBC,YAAYA,CAACA;QAEbA,IAAMA,qBAAqBA;YACvBC,SADEA,qBAAqBA;gBAA3BC,iBA2CCA;gBAtCUA,aAAQA,GAAUA,QAAQA,CAACA;gBAI3BA,gBAAWA,GAAUA,GAAGA,CAACA;gBAEzBA,gBAAWA,GAAIA,UAACA,KAAKA;oBACxBA,KAAIA,CAACA,QAAQA,GAAGA,KAAKA,CAACA;gBAC1BA,CAACA,CAACA;gBAEKA,kBAAaA,GAAGA,UAACA,KAAKA;oBACzBA,KAAIA,CAACA,WAAWA,GAAGA,KAAKA,CAACA;gBAC7BA,CAACA,CAACA;gBAEKA,SAAIA,GAAGA,CAACA,IAAIA,EAACA,WAAWA,EAACA,UAACA,EAAEA,EAACA,SAASA;oBACzCA,MAAMA,CAACA;wBAEHA,aAAaA,EAAGA,UAACA,QAAQA;4BACrBA,EAAEA,CAACA,CAACA,QAAQA,CAACA,MAAMA,IAAIA,GAAGA,CAACA,CAACA,CAACA;gCACzBA,KAAIA,CAACA,QAAQA,GAAGA,SAASA,CAACA,IAAIA,EAAEA,CAACA;gCACjCA,SAASA,CAACA,IAAIA,CAACA,KAAIA,CAACA,QAAQA,CAACA,CAACA;4BAClCA,CAACA;4BACDA,MAAMA,CAACA,EAAEA,CAACA,MAAMA,CAACA,QAAQA,CAACA,CAACA;wBAC/BA,CAACA;wBAEDA,gBAAgBA,EAAEA;4BAEdA,EAAEA,CAACA,CAACA,KAAIA,CAACA,QAAQA,CAACA,CAACA,CAACA;gCAChBA,SAASA,CAACA,IAAIA,CAACA,KAAIA,CAACA,QAAQA,CAACA,CAACA;gCAC9BA,KAAIA,CAACA,QAAQA,GAAGA,EAAEA,CAACA;4BAEvBA,CAACA;4BAACA,IAAIA,CAACA,CAACA;gCACJA,SAASA,CAACA,IAAIA,CAACA,KAAIA,CAACA,WAAWA,CAACA,CAACA;4BACrCA,CAACA;wBAELA,CAACA;qBACJA,CAACA;gBACNA,CAACA,CAACA,CAAAA;YAvCFA,CAACA;YAwCLD,4BAACA;QAADA,CA3CAD,AA2CCC,IAAAD;QAEDA,OAAOA,CAACA,MAAMA,CAACA,cAAcA,CAACA,CAACA,QAAQA,CAACA,eAAeA,EAAEA,CAACA,qBAAqBA,CAACA,CAACA,CAC5EA,MAAMA,CAACA,CAACA,eAAeA,EAAEA,MAAMA,CAACA,CAACA,CAACA;QAEvCA,SAASA,MAAMA,CAACA,aAAaA;YACzBG,aAAaA,CAACA,YAAYA,CAACA,IAAIA,CAACA,eAAeA,CAACA,CAACA;QACrDA,CAACA;IACLH,CAACA,EAvDUD,QAAQA,GAARA,YAAQA,KAARA,YAAQA,QAuDlBA;AAADA,CAACA,EAvDM,GAAG,KAAH,GAAG,QAuDT","file":"security/services/loginRedirectProvider.js","sourceRoot":"C:/Projects/ngToDo/ngToDo/","sourcesContent":["module app.security {\r\n\r\n    \"use strict\";\r\n\r\n    class LoginRedirectProvider implements ng.IServiceProvider {\r\n        constructor() {\r\n            \r\n        }\r\n\r\n        public loginUrl:string = \"/login\";\r\n\r\n        public lastPath:string;\r\n\r\n        public defaultPath:string = \"/\";\r\n\r\n        public setLoginUrl =  (value) => {\r\n            this.loginUrl = value;\r\n        };\r\n\r\n        public setDefaultUrl = (value) => {\r\n            this.defaultPath = value;\r\n        };\r\n\r\n        public $get = [\"$q\",\"$location\",($q,$location) => {\r\n            return {\r\n\r\n                responseError:  (response) => {\r\n                    if (response.status == 401) {\r\n                        this.lastPath = $location.path();\r\n                        $location.path(this.loginUrl);\r\n                    }\r\n                    return $q.reject(response);\r\n                },\r\n\r\n                redirectPreLogin: () => {\r\n\r\n                    if (this.lastPath) {\r\n                        $location.path(this.lastPath);\r\n                        this.lastPath = \"\";\r\n\r\n                    } else {\r\n                        $location.path(this.defaultPath);\r\n                    }\r\n\r\n                }\r\n            };            \r\n        }]\r\n    }\r\n\r\n    angular.module(\"app.security\").provider(\"loginRedirect\", [LoginRedirectProvider])\r\n        .config([\"$httpProvider\", config]);\r\n\r\n    function config($httpProvider) {\r\n        $httpProvider.interceptors.push(\"loginRedirect\");\r\n    }\r\n} "]}